{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","title","style","marginTop","src","width","height","frameBorder","class","allowFullScreen","margin","fontSize","href","opacity","color","paddingLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAqOeA,MAlOf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,gEACA,4BACEC,MAAM,wBACNC,MAAO,CAAEC,UAAW,QACpBC,IAAI,wCACJC,MAAM,MACNC,OAAO,MACPC,YAAY,IACZC,MAAM,cACNC,iBAAe,IAEjB,uBAAGP,MAAO,CAAEQ,OAAQ,SAClB,uBACER,MAAO,CAAES,SAAU,QACnBC,KAAK,wDAFP,eAQJ,yBACEZ,UAAU,eACVE,MAAO,CACLW,QAAS,KAGX,2BACE,gCACE,4CADF,IACwB,KAF1B,2BAMA,2BACE,2BACE,2CADF,IACuB,KAFzB,yVASQ,IACN,0BAAMC,MAAM,WAAZ,iEACiE,KACzD,IACR,6BAbF,IAaS,6BACP,0BAAMA,MAAM,UACT,IADH,2GAIQ,IAlBV,6DAmB6D,IAC3D,0BAAMA,MAAM,WAAZ,iGAKF,2BACE,gCACE,kCADF,KAEU,IAHZ,oCAIoC,IAClC,uBAAGF,KAAK,8CAAR,SALF,gCAMwB,IACtB,uBAAGA,KAAK,2FAAR,WAEK,IATP,oGAW+B,IAC7B,uBAAGA,KAAK,oDAAR,gBAEK,IAdP,mGAkBA,4BACE,wCACW,uBAAGA,KAAK,kCAAR,UADX,0DAEkD,IAChD,uBAAGA,KAAK,2DAAR,YAEK,IALP,sBAQA,+CACkB,uBAAGA,KAAK,2BAAR,UADlB,kDAEyC,IACvC,uBAAGA,KAAK,qCAAR,0BAHF,gHASA,sCACS,uBAAGA,KAAK,0BAAR,UADT,2OAKsB,IACpB,uBAAGA,KAAK,kCAAR,UANF,8BASA,oIAIA,6RAIsD,IACpD,uBAAGA,KAAK,iEAAR,OALF,KAUA,wEAC4C,IAC1C,uBAAGA,KAAK,2BAAR,UAFF,sFAGmE,IACjE,uBAAGA,KAAK,0BAAR,WAJF,oEAK6C,IAC3C,uBAAGA,KAAK,wDAAR,iBAEK,IARP,gNAYkB,uBAAGA,KAAK,4BAAR,QAZlB,yCAaiC,IAC/B,uBAAGA,KAAK,6CAAR,OAdF,WAgBA,yRAMA,4GAEgB,8CAFhB,+FAIY,IACV,uBAAGA,KAAK,6CAAR,0BALF,iCAQgC,8CARhC,6IAU8D,IAC5D,qCAXF,kDAWkE,IAChE,uBAAGA,KAAK,kCAAR,cAZF,OAY8D,IAC5D,uBAAGA,KAAK,mCAAR,OAbF,wPAiBiC,4CAjBjC,gFAkBkE,IAChE,4CAnBF,4JAuBA,uTAKuB,uBAAGA,KAAK,+BAAR,QAA+C,IALtE,iIAOgE,IAC9D,uBAAGA,KAAK,iDAAR,OARF,uKAaA,mHAEyB,+CAFzB,2BAGM,uCAHN,+BAGoD,uCAHpD,4FAOA,mEACuC,IACrC,uBAAGA,KAAK,4CAAR,0BAEK,IAJP,0RAWA,8VAOA,uEAC2C,IACzC,uBAAGA,KAAK,4BAAR,WAFF,oZAUA,6IAKF,uBAAGV,MAAO,CAAEa,YAAa,SAAzB,gECjNYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a474b83.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Lab #8a Intro to Web Development</h1>\n        <iframe\n          title=\"Developer in the wild\"\n          style={{ marginTop: \"15px\" }}\n          src=\"https://giphy.com/embed/L8K62iTDkzGX6\"\n          width=\"440\"\n          height=\"250\"\n          frameBorder=\"0\"\n          class=\"giphy-embed\"\n          allowFullScreen\n        ></iframe>\n        <p style={{ margin: \"-1px\" }}>\n          <a\n            style={{ fontSize: \".7em\" }}\n            href=\"https://giphy.com/gifs/web-development-L8K62iTDkzGX6\"\n          >\n            via GIPHY\n          </a>\n        </p>\n      </header>\n      <div\n        className=\"main-content\"\n        style={{\n          opacity: 0.8\n        }}\n      >\n        <p>\n          <strong>\n            <u>Lab Objective</u>:{\" \"}\n          </strong>\n          Build your own website.\n        </p>\n        <p>\n          <b>\n            <u>Introduction</u>:{\" \"}\n          </b>\n          The availability of professional-grade open source software has\n          increased significantly in the past decade. The goal of the next two\n          labs is to get exposure to a few state of the art examples. The tools\n          you will be analyzing have numerous practical applications. As you\n          complete the labs, think about potential ways you could apply each\n          tool.{\" \"}\n          <font color=\"#F03F47\">\n            You will be asked to provide a couple examples in your report.{\" \"}\n          </font>{\" \"}\n          <br /> <br />\n          <font color=\"orange\">\n            {\" \"}\n            Don't worry if your coding experience is limited or if you haven't\n            worked with machine learning before!\n          </font>{\" \"}\n          This lab can be completed with less than 10 lines of code.{\" \"}\n          <font color=\"#B0CF8F\">\n            However, there will be an opportunity to earn 10% extra credit which\n            will require more code.\n          </font>\n        </p>\n        <p>\n          <strong>\n            <u>Lab</u>:\n          </strong>{\" \"}\n          To build our webpage, we will use{\" \"}\n          <a href=\"https://reactjs.org/tutorial/tutorial.html\">React</a>, which\n          is currently the most{\" \"}\n          <a href=\"https://www.npmtrends.com/@angular/core-vs-angular-vs-react-vs-vue-vs-svelte-vs-flutter\">\n            popular\n          </a>{\" \"}\n          frontend web development software. Despite being the the most widely\n          used, there are a variety of{\" \"}\n          <a href=\"https://2019.stateofjs.com/front-end-frameworks/\">\n            alternatives\n          </a>{\" \"}\n          that have their own strengths and weaknesses. Follow the steps below\n          to complete this exercise:\n        </p>\n        <ul>\n          <li>\n            Download <a href=\"https://www.google.com/chrome/\">Chrome</a> if you\n            don't alread have it. We will be using Chrome's{\" \"}\n            <a href=\"https://developers.google.com/web/tools/chrome-devtools\">\n              DevTools\n            </a>{\" \"}\n            later in this lab.\n          </li>\n          <li>\n            Create your own <a href=\"https://github.com/join\">GitHub</a> account\n            and use your student status to get the{\" \"}\n            <a href=\"https://education.github.com/pack\">\n              Student Developer Pack\n            </a>\n            . The developer pack isn't required to complete this assignment, but\n            is still a great resource for students.\n          </li>\n          <li>\n            Make a <a href=\"https://www.gitpod.io/\">GitPod</a> account and\n            connect it to your GitHub account. GitPod is an online IDE that\n            anyone can use for 50 hours a month. Students who have the developer\n            pack can use the IDE for up to 100 hours a month. Feel free to use\n            another IDE such as{\" \"}\n            <a href=\"https://code.visualstudio.com/\">VSCode</a> if you have a\n            preference.\n          </li>\n          <li>\n            Create your own GitHub repository using whatever name you'd like and\n            go to your repository homepage.\n          </li>\n          <li>\n            If you've signed up for GitPod, there will be to a \"Gitpod\" button\n            on the right side of your repository. Use that button to open the\n            IDE within your newly created project. If using a different IDE, you\n            can clone the repository to your local maching with{\" \"}\n            <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">\n              Git\n            </a>\n            .\n          </li>\n          <li>\n            The IDE that you just opened is a running{\" \"}\n            <a href=\"https://www.docker.com/\">Docker</a> container that is\n            preinstalled with the necessary software to build our app. (i.e.{\" \"}\n            <a href=\"https://nodejs.org/en/\">Node.js</a>) Use the IDE terminal\n            to create your app as described in React's{\" \"}\n            <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">\n              documentation\n            </a>{\" \"}\n            documentation. You only need to follow the instructions under\n            \"Create React App.\" THe second step under that section uses \"cd\"\n            which stands for \"change directory.\" Knowing how to work with\n            terminals using <a href=\"https://devhints.io/bash\">Bash</a> can be\n            very helpful when working with{\" \"}\n            <a href=\"https://www.edureka.co/blog/iot-tutorial/\">IoT</a> tools.\n          </li>\n          <li>\n            After running the start command, your terminal will display a URL\n            that you can follow to display your running app! The app is set up\n            to continuously reload so you'll be able to see the result of any\n            changes you make whenever you save an opened file.\n          </li>\n          <li>\n            Explore your project's file structure. In your project's root,\n            you'll find a <code>package.json</code> file that lists the\n            installed softare, executable scripts, and a variety of other\n            potential{\" \"}\n            <a href=\"https://docs.npmjs.com/files/package.json\">\n              project specifications\n            </a>\n            . Every Node.js project has a <code>package.json</code> file so it's\n            usually wise to check that file first whenever you explore a new\n            project. The project's main source code can be found in the{\" \"}\n            <code>src</code> folder. In that folder you'll find a series of{\" \"}\n            <a href=\"https://htmlcheatsheet.com/js/\">Javascript</a> and{\" \"}\n            <a href=\"https://htmlcheatsheet.com/css/\">CSS</a> files. Javascript\n            is the current go-to for frontend logic code and CSS provides\n            styling tools. Almost every website on the web runs on a mix of\n            HTML, Javascript, and CSS files. There aren't any HTML files in your\n            source folder, but there is an <code>index.html</code> file located\n            in your public folder. Despite not being in the src folder, the{\" \"}\n            <code>index.html</code> is connected to one of the Javascript files.\n            Identify that Javascript file in your lab report and the variable id\n            that is shared between the two files.\n          </li>\n          <li>\n            Modify your app so that it includes your name, a different\n            background color, and a single image of your choosing. Feel free to\n            make any other customizations if you'd like to! Each of the three\n            modifications require a single line of code respectively. React's\n            syntax is similar to <a href=\"https://htmlcheatsheet.com/\">HTML</a>{\" \"}\n            syntax. React was designed to emulate HTML code since it enables\n            developers to combine HTML and Javascript files into a single{\" \"}\n            <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>.\n            This detail isn't significant for this project but it's an important\n            characteristic to be aware of if you decide to start any other React\n            projects in the future.\n          </li>\n          <li>\n            After you have made your modifications, you can build it for\n            production by running \"<code>npm run build</code>\" in your terminal.\n            The <code>build</code> command will create a new \"<code>build</code>\n            \" folder that contains a static version of your app that is ready to\n            be hosted publicly!\n          </li>\n          <li>\n            After building your app, you need to{\" \"}\n            <a href=\"https://rogerdudler.github.io/git-guide/\">\n              add, commit, then push\n            </a>{\" \"}\n            your code to your public repository. (i.e. (1) \"git add -A\", (2)\n            \"git commit -m \"I updated thing C and added thing D\", (3) \"push\")\n            Always try to use detailed commit messages since you can use them in\n            the future to find something located in a previous version of your\n            repository.\n          </li>\n          <li>\n            Verify that you have pushed your changes to your public repo by\n            checking the last commit time, which is listed on the right side of\n            your repository's homepage. If that time looks correct, then use the\n            button located directly above that text to download or \"git clone\n            your-app-repo-url\" your app to your local machine.\n          </li>\n          <li>\n            To host your app, this tutorial will use{\" \"}\n            <a href=\"https://www.netlify.com/\">Netlify</a>'s free hosting\n            service. Feel free to use whatever hosting service you'd like.\n            Netlify makes it easy to host websites for free and offers a\n            generous monthly memory bandwith. After you create your Netlify\n            profile, you'll eventually reach a new site page that contains an\n            option to drag and drop your site into a grey dashed box. Grab the\n            build folder from your local project and drop it into that box.\n          </li>\n          <li>\n            Go to your public URL to see your live site! You can change your\n            public site name in the site-settings menu.\n          </li>\n        </ul>\n        <p style={{ paddingLeft: \"20px\" }}>\n          Include both partner's URLs when submitting your reports.\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}